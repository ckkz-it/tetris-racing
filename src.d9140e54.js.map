{"version":3,"sources":["src/constants.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.d9140e54.js","sourceRoot":"..","sourcesContent":["export const FRAME_RATE = 60;\r\nexport const SCREEN_PROPORTION = 1.8;\r\nexport const BLOCK_WIDTH = 35;\r\nexport const BLOCK_SPACING = 5;\r\nexport const BLOCK_FULL_WIDTH = BLOCK_WIDTH + BLOCK_SPACING;\r\nexport const BLOCKS_COUNT_X = 10;\r\nexport const BLOCKS_COUNT_Y = BLOCKS_COUNT_X * SCREEN_PROPORTION;\r\n\r\nexport const CANVAS_WIDTH = BLOCK_FULL_WIDTH * BLOCKS_COUNT_X;\r\nexport const CANVAS_HEIGHT = CANVAS_WIDTH * SCREEN_PROPORTION;\r\n\r\nexport const CAR_POSITION = {\r\n  LEFT: BLOCK_FULL_WIDTH * 2,\r\n  RIGHT: BLOCK_FULL_WIDTH * (BLOCKS_COUNT_X - 5),\r\n};\r\nexport const CAR_MATRIX = [\r\n  [0, 1, 0],\r\n  [1, 1, 1],\r\n  [0, 1, 0],\r\n  [1, 0, 1],\r\n];\r\n\r\nexport const BORDER_POSITION = {\r\n  LEFT: 0,\r\n  RIGHT: BLOCK_FULL_WIDTH * (BLOCKS_COUNT_X - 1),\r\n};\r\n","import p5Type from 'p5';\r\n\r\nimport * as constants from './constants';\r\nimport bgFile from './assets/bg.png';\r\nimport textureFile from './assets/texture.png';\r\n\r\ndeclare const p5: any;\r\n\r\nconst sketch = (p: p5Type) => {\r\n  let player: Car;\r\n  let bg: Background;\r\n  let border: Border;\r\n  let baseTexture: p5Type.Image;\r\n  let bgImage: p5Type.Image;\r\n  let cars: Car[] = [];\r\n  let score = 0;\r\n  let BORDER_SPEED = constants.FRAME_RATE / 4;\r\n\r\n  p.preload = () => {\r\n    baseTexture = p.loadImage(textureFile);\r\n    bgImage = p.loadImage(bgFile);\r\n  };\r\n\r\n  p.setup = () => {\r\n    p.frameRate(constants.FRAME_RATE);\r\n    p.createCanvas(constants.CANVAS_WIDTH, constants.CANVAS_HEIGHT);\r\n    bg = new Background();\r\n\r\n    const playerYOffset =\r\n      constants.BLOCK_FULL_WIDTH * (constants.BLOCKS_COUNT_Y - 6);\r\n    player = new Car(constants.CAR_POSITION.RIGHT, playerYOffset);\r\n\r\n    border = new Border();\r\n  };\r\n\r\n  p.draw = () => {\r\n    bg.draw();\r\n\r\n    border.update();\r\n    border.draw();\r\n\r\n    p.textSize(24);\r\n    p.text(`Score: ${score}`, 40, 30);\r\n\r\n    if (p.frameCount % constants.FRAME_RATE === 0) {\r\n      score += 1;\r\n    }\r\n\r\n    player.draw();\r\n\r\n    if (p.frameCount % (constants.FRAME_RATE * 3) === 0 || p.frameCount === 1) {\r\n      cars.push(\r\n        new Car(\r\n          Math.random() > 0.5\r\n            ? constants.CAR_POSITION.RIGHT\r\n            : constants.CAR_POSITION.LEFT,\r\n          -(constants.BLOCK_FULL_WIDTH * 4),\r\n          true\r\n        )\r\n      );\r\n    }\r\n    for (let i = 0; i < cars.length; i++) {\r\n      cars[i].update();\r\n      cars[i].draw();\r\n      if (cars[i].y > constants.CANVAS_HEIGHT) {\r\n        cars.splice(i, 1);\r\n      }\r\n      if (player.hits(cars[i])) {\r\n        cars = [];\r\n        score = 0;\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  p.keyPressed = () => {\r\n    if (\r\n      p.keyCode === p.LEFT_ARROW &&\r\n      player.x === constants.CAR_POSITION.RIGHT\r\n    ) {\r\n      player.x = constants.CAR_POSITION.LEFT;\r\n    }\r\n\r\n    if (\r\n      p.keyCode === p.RIGHT_ARROW &&\r\n      player.x === constants.CAR_POSITION.LEFT\r\n    ) {\r\n      player.x = constants.CAR_POSITION.RIGHT;\r\n    }\r\n  };\r\n\r\n  class BlockTexture {\r\n    constructor(public x: number, public y: number, private size: number) {}\r\n\r\n    draw() {\r\n      p.image(baseTexture, this.x, this.y, this.size, this.size);\r\n    }\r\n  }\r\n\r\n  class Background {\r\n    draw() {\r\n      p.image(bgImage, 0, 0);\r\n    }\r\n  }\r\n\r\n  class Car {\r\n    public blocks: BlockTexture[] = [];\r\n    public width = constants.BLOCK_WIDTH;\r\n\r\n    constructor(private _x: number, private _y: number, private move = false) {\r\n      this.setup();\r\n    }\r\n\r\n    setup() {\r\n      for (let yAxis = 0; yAxis < constants.CAR_MATRIX.length; yAxis++) {\r\n        for (\r\n          let xAxis = 0;\r\n          xAxis < constants.CAR_MATRIX[yAxis].length;\r\n          xAxis++\r\n        ) {\r\n          const shouldDrawBlock = constants.CAR_MATRIX[yAxis][xAxis] !== 0;\r\n          if (shouldDrawBlock) {\r\n            this.blocks.push(\r\n              new BlockTexture(\r\n                this.x + constants.BLOCK_FULL_WIDTH * xAxis,\r\n                this.y + constants.BLOCK_FULL_WIDTH * yAxis,\r\n                this.width\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    get x() {\r\n      return this._x;\r\n    }\r\n\r\n    set x(value) {\r\n      this._x = value;\r\n      let movementSize = constants.BLOCK_FULL_WIDTH * 3;\r\n      if (value === constants.CAR_POSITION.LEFT) {\r\n        movementSize *= -1;\r\n      }\r\n      this.blocks.forEach(block => {\r\n        block.x += movementSize;\r\n      });\r\n    }\r\n\r\n    get y() {\r\n      return this._y;\r\n    }\r\n\r\n    set y(value) {\r\n      this._y = value;\r\n      const leftTopBlockPosition = this.blocks[0].y;\r\n      this.blocks.forEach(block => {\r\n        block.y = block.y - leftTopBlockPosition + value;\r\n      });\r\n    }\r\n\r\n    update() {\r\n      if (this.move) {\r\n        if (p.frameCount % (constants.FRAME_RATE / 4) === 0) {\r\n          this.y = this.y + constants.BLOCK_FULL_WIDTH;\r\n        }\r\n      }\r\n    }\r\n\r\n    draw() {\r\n      this.blocks.forEach(block => {\r\n        block.draw();\r\n      });\r\n    }\r\n\r\n    hits(car) {\r\n      const carHeight = constants.BLOCK_FULL_WIDTH * 4;\r\n      const carWidth = constants.BLOCK_FULL_WIDTH * 3;\r\n      if (this.x === car.x && this.y >= car.y && car.y + carHeight > this.y) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  class BorderItem {\r\n    public blocks: BlockTexture[] = [];\r\n\r\n    constructor(private x: number, private y: number, private height = 3) {\r\n      this.setup();\r\n    }\r\n\r\n    setup() {\r\n      for (let i = 0; i < this.height; i++) {\r\n        this.blocks.push(\r\n          new BlockTexture(\r\n            this.x,\r\n            this.y + i * constants.BLOCK_FULL_WIDTH,\r\n            constants.BLOCK_WIDTH\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    update() {\r\n      if (p.frameCount % BORDER_SPEED === 0) {\r\n        this.blocks.forEach((block, index) => {\r\n          block.y = block.y + constants.BLOCK_FULL_WIDTH;\r\n          if (block.y > constants.CANVAS_HEIGHT) {\r\n            this.blocks.splice(index, 1);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    draw() {\r\n      this.blocks.forEach(block => {\r\n        block.draw();\r\n      });\r\n    }\r\n\r\n    clear() {\r\n      this.blocks = [];\r\n    }\r\n  }\r\n\r\n  class Border {\r\n    public borderItems: BorderItem[] = [];\r\n\r\n    constructor(private spacing = constants.BLOCK_FULL_WIDTH) {\r\n      this.setup();\r\n    }\r\n\r\n    setup() {\r\n      for (let i = 0; i < 5; i++) {\r\n        this.borderItems.push(\r\n          new BorderItem(\r\n            constants.BORDER_POSITION.LEFT,\r\n            i * constants.BLOCK_FULL_WIDTH * 4\r\n          )\r\n        );\r\n        this.borderItems.push(\r\n          new BorderItem(\r\n            constants.BORDER_POSITION.RIGHT,\r\n            i * constants.BLOCK_FULL_WIDTH * 4\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    update() {\r\n      if (p.frameCount % (BORDER_SPEED * 4) === 1 || p.frameCount === 1) {\r\n        const leftBorder = new BorderItem(\r\n          constants.BORDER_POSITION.LEFT,\r\n          -(constants.BLOCK_FULL_WIDTH * 4)\r\n        );\r\n        this.borderItems.push(leftBorder);\r\n\r\n        const rightBorder = new BorderItem(\r\n          constants.BORDER_POSITION.RIGHT,\r\n          -(constants.BLOCK_FULL_WIDTH * 4)\r\n        );\r\n        this.borderItems.push(rightBorder);\r\n      }\r\n\r\n      this.borderItems.forEach(b => {\r\n        b.update();\r\n      });\r\n\r\n      if (p.frameCount % (BORDER_SPEED * 20) === 0) {\r\n        this.borderItems.splice(0, this.borderItems.length - 10);\r\n      }\r\n    }\r\n\r\n    draw() {\r\n      this.borderItems.forEach(b => {\r\n        b.draw();\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nnew p5(sketch);\r\n"]}